# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := png
### Rules for action "prebuild":
quiet_cmd_picasso_gyp_png_target_prebuild = ACTION picasso_gyp_png_target_prebuild $@
cmd_picasso_gyp_png_target_prebuild = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir)/include; python tools/cp.py third_party/libpng-1.6.17/scripts/pnglibconf.h.prebuilt "$(builddir)/include/pnglibconf.h"

$(builddir)/include/pnglibconf.h: obj := $(abs_obj)
$(builddir)/include/pnglibconf.h: builddir := $(abs_builddir)
$(builddir)/include/pnglibconf.h: TOOLSET := $(TOOLSET)
$(builddir)/include/pnglibconf.h: $(srcdir)/third_party/libpng-1.6.17/scripts/pnglibconf.h.prebuilt FORCE_DO_CMD
	$(call do_cmd,picasso_gyp_png_target_prebuild)

all_deps += $(builddir)/include/pnglibconf.h
action_picasso_gyp_png_target_prebuild_outputs := $(builddir)/include/pnglibconf.h

### Rules for action "install_header":
quiet_cmd_picasso_gyp_png_target_install_header = ACTION picasso_gyp_png_target_install_header $@
cmd_picasso_gyp_png_target_install_header = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir)/include; python tools/cp.py third_party/libpng-1.6.17/png.h "$(builddir)/include/png.h"

$(builddir)/include/png.h: obj := $(abs_obj)
$(builddir)/include/png.h: builddir := $(abs_builddir)
$(builddir)/include/png.h: TOOLSET := $(TOOLSET)
$(builddir)/include/png.h: $(srcdir)/third_party/libpng-1.6.17/png.h FORCE_DO_CMD
	$(call do_cmd,picasso_gyp_png_target_install_header)

all_deps += $(builddir)/include/png.h
action_picasso_gyp_png_target_install_header_outputs := $(builddir)/include/png.h

### Rules for action "install_header1":
quiet_cmd_picasso_gyp_png_target_install_header1 = ACTION picasso_gyp_png_target_install_header1 $@
cmd_picasso_gyp_png_target_install_header1 = LD_LIBRARY_PATH=$(builddir)/lib.host:$(builddir)/lib.target:$$LD_LIBRARY_PATH; export LD_LIBRARY_PATH; cd $(srcdir)/.; mkdir -p $(builddir)/include; python tools/cp.py third_party/libpng-1.6.17/pngconf.h "$(builddir)/include/pngconf.h"

$(builddir)/include/pngconf.h: obj := $(abs_obj)
$(builddir)/include/pngconf.h: builddir := $(abs_builddir)
$(builddir)/include/pngconf.h: TOOLSET := $(TOOLSET)
$(builddir)/include/pngconf.h: $(srcdir)/third_party/libpng-1.6.17/pngconf.h FORCE_DO_CMD
	$(call do_cmd,picasso_gyp_png_target_install_header1)

all_deps += $(builddir)/include/pngconf.h
action_picasso_gyp_png_target_install_header1_outputs := $(builddir)/include/pngconf.h


DEFS_Debug := \
	'-DZLIB_DLL' \
	'-D_DEBUG' \
	'-DENABLE_FREE_TYPE2=1' \
	'-DENABLE_FONT_CONFIG=1'

# Flags passed to all source files.
CFLAGS_Debug :=

# Flags passed to only C files.
CFLAGS_C_Debug :=

# Flags passed to only C++ files.
CFLAGS_CC_Debug := \
	-O0 \
	-Wall \
	-g \
	-fPIC \
	-fno-rtti \
	-fno-exceptions \
	-Wno-unused-result

INCS_Debug := \
	-I$(srcdir)/third_party/libpng-1.6.17 \
	-I$(builddir)/include

DEFS_Release := \
	'-DZLIB_DLL' \
	'-DNDEBUG' \
	'-DENABLE_FREE_TYPE2=1' \
	'-DENABLE_FONT_CONFIG=1'

# Flags passed to all source files.
CFLAGS_Release :=

# Flags passed to only C files.
CFLAGS_C_Release :=

# Flags passed to only C++ files.
CFLAGS_CC_Release := \
	-O3 \
	-Wall \
	-fPIC \
	-fno-rtti \
	-fno-exceptions \
	-Wno-unused-result

INCS_Release := \
	-I$(srcdir)/third_party/libpng-1.6.17 \
	-I$(builddir)/include

OBJS := \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/png.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngerror.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngget.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngmem.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngpread.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngread.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngrio.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngrtran.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngrutil.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngset.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngtrans.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngwio.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngwrite.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngwtran.o \
	$(obj).target/$(TARGET)/third_party/libpng-1.6.17/pngwutil.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(builddir)/lib.target/libzlib.so $(obj).target/libzlib.so

# Make sure our actions/rules run before any of us.
$(OBJS): | $(action_picasso_gyp_png_target_prebuild_outputs) $(action_picasso_gyp_png_target_install_header_outputs) $(action_picasso_gyp_png_target_install_header1_outputs)

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE))  $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.c FORCE_DO_CMD
	@$(call do_cmd,cc,1)

# End of this set of suffix rules
### Rules for final target.
# Build our special outputs first.
$(obj).target/libpng.so: | $(action_picasso_gyp_png_target_prebuild_outputs) $(action_picasso_gyp_png_target_install_header_outputs) $(action_picasso_gyp_png_target_install_header1_outputs)

# Preserve order dependency of special output on deps.
$(action_picasso_gyp_png_target_prebuild_outputs) $(action_picasso_gyp_png_target_install_header_outputs) $(action_picasso_gyp_png_target_install_header1_outputs): | $(builddir)/lib.target/libzlib.so $(obj).target/libzlib.so

LDFLAGS_Debug := \
	-Wl,-rpath=\$$ORIGIN/lib.target/ \
	-Wl,-rpath-link=\$(builddir)/lib.target/

LDFLAGS_Release := \
	-Wl,-rpath=\$$ORIGIN/lib.target/ \
	-Wl,-rpath-link=\$(builddir)/lib.target/

LIBS :=

$(obj).target/libpng.so: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/libpng.so: LIBS := $(LIBS)
$(obj).target/libpng.so: LD_INPUTS := $(OBJS) $(obj).target/libzlib.so
$(obj).target/libpng.so: TOOLSET := $(TOOLSET)
$(obj).target/libpng.so: $(OBJS) $(obj).target/libzlib.so FORCE_DO_CMD
	$(call do_cmd,solink)

all_deps += $(obj).target/libpng.so
# Add target alias
.PHONY: png
png: $(builddir)/lib.target/libpng.so

# Copy this to the shared library output path.
$(builddir)/lib.target/libpng.so: TOOLSET := $(TOOLSET)
$(builddir)/lib.target/libpng.so: $(obj).target/libpng.so FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/lib.target/libpng.so
# Short alias for building this shared library.
.PHONY: libpng.so
libpng.so: $(obj).target/libpng.so $(builddir)/lib.target/libpng.so

# Add shared library to "all" target.
.PHONY: all
all: $(builddir)/lib.target/libpng.so

